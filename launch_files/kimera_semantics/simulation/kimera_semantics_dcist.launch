<!-- <?xml version="1.0" encoding="ISO-8859-15"?>
 -->

   <!-- This launch file runs Kimera Semantics for the DCIST simulator
 using ground truth pose estimates and segmentation. It is heavily based
 on the the launch file kimera_semantics.launch from the Kimera-Semantics
 package. -->
 <launch>
  <arg name="voxel_size"     default="0.05"/>
  <param name="use_sim_time" value="true" />
  <arg name="dataset_name"   value="DCIST"/>
  <arg name="verbosity"      default="1"/>
  <arg name="backend_type"   default="1"/>
  <arg name="online"         default="true"/>
  <arg name="use_lcd" default="true"/>
  <arg name="parallel"       default="true"/>

  <!-- Frame IDs -->
  <arg name="base_link_frame_id" value="husky"/>
  <arg name="left_cam_frame_id"  value="husky/camera_left"/>
  <arg name="right_cam_frame_id" value="husky/camera_right"/>

  <!-- Use the husky's left camera frame as the sensor frame-->
  <arg name="sensor_frame" default="husky/camera_left"/>

    <!-- Launch static TF nodes to avoid problems with stale bag data -->
    <!-- Subscribe to the groundtruth husky data topic  -->
  <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster0"
    args="0 0 0 0 0 0 1 husky/TrueState husky 10"/> 
    <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster1"
      args="0 0 0 0 0 0 1 husky/TrueState husky/base 10"/> 
  <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster2"
    args="0 0 .5 -1.97773339372e-10 4.72673566954e-11 -0.70710670948 0.70710682869 husky husky/imu 10"/>
  <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster3"
    args="0 0 .5 -0.500000059605 0.5 -0.499999940395 0.5 husky husky/camera_left 10"/>
  <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster4"
    args=".1 0 .5 -0.500000059605 0.5 -0.499999940395 0.5 husky husky/camera_right 10"/>
  <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster5"
    args="0 0 .5 -0.500000059605 0.5 -0.499999940395 0.5 husky husky/depth 10"/> 
  <node pkg="tf" type="static_transform_publisher" name="world_link_broadcaster6"
    args="0 0 .5 -0.500000059605 0.5 -0.499999940395 0.5 husky husky/semantic 10"/>

  <!-- Set logging details -->
  <arg name="log_output" default="true"/>
  <arg name="log_output_path"
       default="$(find kimera_semantics)/output_logs/DCIST/"
       if="$(arg log_output)"/>
  <arg name="log_gt_data" default="true"/>
  <arg name="gt_topic"    default="husky/husky_velocity_controller/odom/"
       if="$(arg log_gt_data)"/>

  <arg name="odometry_ground_truth_topic" value=""/>

  <!-- Set camera topics -->
  <arg name="left_cam_topic"   value="/husky/camera_left/image_raw"/>
  <arg name="right_cam_topic"  value="/husky/camera_right/image_raw"/>
  <arg name="imu_topic"        value="/husky/imu"/>

  <!-- If you want to play directly from a rosbag -->
  <arg name="play_bag" default="false"/>
  <arg name="bag_file" default="/home/mstadler/2019-12-05-16-40-16_processed.bag"/>
  <node name="player" pkg="rosbag" type="play" output="screen"
  args="-r 1 --clock $(arg bag_file)"  if="$(arg play_bag)"/>
  <!-- -r 0.5 -->

  <arg name="publish_point_clouds" default="true"/>
  <arg name="run_stereo_dense"     default="false"/>
  <group if="$(arg publish_point_clouds)">
    <node pkg="nodelet" type="nodelet" name="nodelet_manager" args="manager"
          output="screen"/>

    <!-- For registered semantic point cloud conversion using groundtruth semantics-->
    <node pkg="nodelet" type="nodelet" name="cloudify"
          args="load depth_image_proc/point_cloud_xyzrgb nodelet_manager
          -no-bond" unless="$(arg run_stereo_dense)">
      <!-- Input -->
      <remap from="rgb/camera_info"             to="husky/camera_left/camera_info"/>
      <remap from="rgb/image_rect_color"        to="husky/semantic/image_raw"/>
      <remap from="depth_registered/image_rect" to="husky/depth/image_raw"/>
      <!-- Output -->
      <remap from="depth_registered/points"     to="/points_color"/>
      <!-- Params -->
      <param name="queue_size" value="20"/>
    </node>

     <!-- Run stereo_dense_reconstruction_node -->
    <node ns="stereo_gray" name="stereo_image_proc" pkg="stereo_image_proc"
      type="stereo_image_proc" clear_params="true" output="screen"
      if="$(arg run_stereo_dense)">
      <!-- Input -->
      <remap from="left/image_rect_color"   to="/dev/null/camera_left"/>
      <remap from="right/image_rect_color"  to="/dev/null/camera_right"/>
      <remap from="left/image_raw"          to="/husky/camera_left/image_raw"/>
      <remap from="left/camera_info"        to="/husky/camera_left/camera_info"/>
      <remap from="right/image_raw"         to="/husky/camera_right/image_raw"/>
      <remap from="right/camera_info"       to="/husky/camera_right/camera_info"/>
      <!-- Output -->
      <remap from="/stereo_gray/points2"    to="/stereo_gray/points2"/>
      <!-- Params -->
      <param name="approximate_sync" value="true" />
    </node>

    <!-- Recolor dense stereo pointcloud with semantic labels-->
    <node name="pointcloud_recolor" type="pointcloud_recolor"
      pkg="pointcloud_recolor" output="screen"
      args="-alsologtostderr" required="true" if="$(arg run_stereo_dense)">
      <!-- Input -->
      <remap from="image_in"               to="/husky/semantic/image_raw"/>
      <remap from="pointcloud_in"          to="/stereo_gray/points2"/>
      <!-- Output -->
      <!-- It seems like this is not working... Will need to visualize further, etc -->
      <remap from="pointcloud_recolor_out" to="/points"/>
    </node>
  </group>

  <!-- Send colored pointcloud with semantics to kimera_semantics for 3D segmentation -->
  <arg name="server_type" default="kimera_semantics_node"/>
  <node name="kimera_semantics_node" pkg="kimera_semantics_ros"
    type="$(arg server_type)" output="screen"
    args="-alsologtostderr -colorlogtostderr" clear_params="true">
    <!-- Input -->
    <remap from="pointcloud" to="/points_color"/>
    <!-- Params -->
    <param name="tsdf_voxel_size" value="$(arg voxel_size)" />
    <param name="tsdf_voxels_per_side" value="32" />
    <param name="max_ray_length_m" value="20.0" />
    <param name="min_time_between_msgs_sec" value="0.2" />
    <param name="voxel_carving_enabled" value="true" />
    <param name="color_mode" value="lambert_color"/>
    <param name="use_const_weight" value="false" />

    <param name="sensor_frame" value="$(arg sensor_frame)"/>
    <param name="use_tf_transforms" value="true" />

    <param name="enable_icp" value="false" />
    <param name="icp_iterations" value="10" />

    <param name="verbose" value="true" />
    <!-- "fast" or "merged" -->
    <param name="semantic_tsdf_integrator_type"    value="fast" />
    <!-- "color", "semantic" or "semantic_probability" -->
    <param name="semantic_color_mode"              value="semantic"/>
    <param name="semantic_measurement_probability" value="0.8" />

    <!-- Is this needed? -->
    <param name="slice_level" value="1.0" />

    <param name="semantic_label_2_color_csv_filepath"
    value="$(find kimera_semantics_ros)/cfg/dcist_overpass_city_segmentation_mapping.csv"/>

    <param name="publish_pointclouds" value="true"/>
    <param name="update_mesh_every_n_sec" value="0.2" />
    <param name="log_mesh" value="true"/>
    <param name="mesh_filename" value="$(find kimera_semantics_ros)/mesh_results/mesh.ply" />
  </node>

</launch>
